from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tools.notification import NotificationStates, Notification
from tools.tools import is_admin

dp = Router()
@dp.message(Command("send_notification"))
async def cmd_send_notification(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        await state.set_state(NotificationStates.waiting_for_text)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


@dp.message(NotificationStates.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    if len(message.text) > 4000:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(text=message.text)

    builder = InlineKeyboardBuilder()
    for level in range(1, 5):
        builder.button(text=f"–£—Ä–æ–≤–µ–Ω—å {level}", callback_data=f"notif_level_{level}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notif_cancel")
    builder.adjust(2, repeat=True)

    await message.answer(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1-4):",
        reply_markup=builder.as_markup()
    )
    await state.set_state(NotificationStates.waiting_for_level)


@dp.callback_query(F.data.startswith("notif_level_"), NotificationStates.waiting_for_level)
async def process_level(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    level = int(callback.data.split('_')[2])
    data = await state.get_data()

    try:
        notification = Notification(text=data['text'], notification_class=level, bot=bot)
        await notification.send_notification()
        await callback.message.edit_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

    await state.clear()



@dp.callback_query(F.data == "notif_cancel", NotificationStates.waiting_for_level)
async def cancel_notification(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "cancel")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")